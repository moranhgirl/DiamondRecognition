int RowsNum = img.rows;
	int ColsNum = img.cols;
	double k, b, c;
	k = 2;
	b = 50;
	c = 1;
	Mat dstImg(img.size(), img.type());
	//进行遍历图像像素,对每个像素进行相应的线性变换
	for (int i = 0; i < RowsNum; i++)
	{
	    for (int j = 0; j < ColsNum; j++)
	    {
	        //c为遍历图像的三个通道
	        for (int c = 0; c < 3; c++)
	        {
	            //使用at操作符，防止越界
	            dstImg.at<Vec3b>(i, j)[c] = saturate_cast<uchar>
	                (k* (img.at<Vec3b>(i, j)[c]) + b);

	        }
	    }
	}
	double temp = 0.0;
	for (int i = 0; i < img.rows; i++)
	{
	    for (int j = 0; j < img.cols; j++)
	    {
	        temp = (double)img.at<uchar>(i, j);
	        temp = c*log((double)(1 + temp));
	        dstImg.at<uchar>(i, j) = saturate_cast<uchar>(temp);
	    }
	}
	//进行归一化处理
	normalize(dstImg, dstImg, 0, 255, NORM_MINMAX);
	convertScaleAbs(dstImg, dstImg);

	
	// 读取视频流
    //cv::VideoCapture capture("D:/testa.mp4");
    // 检测视频是否读取成功
    //if (!capture.isOpened())
    //{
        //cout << "No Input Image" << endl;
        //return 1;
    //}

    // 获取图像帧率
    //double rate= capture.get(CV_CAP_PROP_FPS);
    //bool stop(false);
    //cv::Mat frame; // 当前视频帧
    //cv::namedWindow("Extracted Frame");

    // 每一帧之间的延迟
    //int delay= 1000/rate;

    // 遍历每一帧
    //while (!stop)
    //{
        // 尝试读取下一帧
        //if (!capture.read(frame))
            //break;
        //cv::imshow("Extracted Frame",frame);
        // 引入延迟
        //if (cv::waitKey(delay)>=0)
                //stop= true;
    //}
    
    
    
    
    int GlevelAvg(cv::Mat &image)
{
    if(image.channels()!=1)
    {
        cout << "Please input Gray-image!" << endl;
        return 0;
    }

    //灰度阈值
    int T = 0;
    //像素总数
    int totalNum = image.rows * image.cols;
    //灰度直方图，下标是灰度值，保存内容是灰度值对应的像素点总数
    int Histogram[totalNum] = {0};
    int num = 0;

    while(num <= totalNum)
    {
        for(int i = 0;i < image.rows; i++)   //为表述清晰，并没有把rows和cols单独提出来
        {
            for(int j = 0;j < image.cols; j++)
            {
                Histogram[num] = (int)image.at<uchar>(i,j);
            }
        }
    }

    for(int i = 0; i < 255; i++)
    {
        T =  T + Histogram[i];
    }

    return T/totalNum;
}
    
    
int GlevelAvg(cv::Mat &image);














	vector<vector<Point>> contours;
	vector<Vec4i> hierarchy;
	findContours(img3, contours, hierarchy, RETR_TREE, CHAIN_APPROX_SIMPLE, Point(0, 0));
	for (int i = 0; i < (int)contours.size(); i++)
	{
	    double g_dConArea = contourArea(contours[i], true);
	    cout << "【用轮廓面积计算函数计算出来的第" << i << "个轮廓的面积为：】" << g_dConArea << endl;
	}
	
	
	
	
	
	
	
	
	
	
	
	pencv提取视频每一帧
// test3.cpp  

//  

// 该程序实现视频和图片的相互转换.  

// Image_to_video()函数将一组图片合成AVI视频文件.  

// Video_to_image()函数将AVI视频文件读入，将每一帧存储为jpg文件.  

//  

////////////////////////////////////////////////////////////////////////  

#include <stdlib.h>  

#include <stdio.h>  

#include <math.h>  

#include <cv.h>  

#include <highgui.h>  

#define NUM_FRAME 300 //只处理前300帧，根据视频帧数可修改  

 

void Video_to_image(char* filename)  

{  

printf("------------- video to image ... ----------------n");  

//初始化一个视频文件捕捉器  

CvCapture* capture = cvCaptureFromAVI(filename);  

//获取视频信息  

cvQueryFrame(capture);  

int frameH    = (int) cvGetCaptureProperty(capture, CV_CAP_PROP_FRAME_HEIGHT);  

int frameW    = (int) cvGetCaptureProperty(capture, CV_CAP_PROP_FRAME_WIDTH);  

int fps       = (int) cvGetCaptureProperty(capture, CV_CAP_PROP_FPS);  

int numFrames = (int) cvGetCaptureProperty(capture, CV_CAP_PROP_FRAME_COUNT);  

printf("tvideo height : %dntvideo width : %dntfps : %dntframe numbers : %dn", frameH, frameW, fps, numFrames);  

//定义和初始化变量  

int i = 0;  

IplImage* img = 0;  

char image_name[13];  

 

cvNamedWindow( "mainWin", CV_WINDOW_AUTOSIZE );  

//读取和显示  

while(1)  

{  

   

  img = cvQueryFrame(capture); //获取一帧图片  

  cvShowImage( "mainWin", img ); //将其显示  

  char key = cvWaitKey(20);  

   

  sprintf(image_name, "%s%d%s", "image", ++i, ".jpg");//保存的图片名  

   

  cvSaveImage( image_name, img);   //保存一帧图片  

 

  if(i == NUM_FRAME) break;  

}  

cvReleaseCapture(&capture);  

cvDestroyWindow("mainWin");  

}  

 

void Image_to_video()  

{  

int i = 0;  

IplImage* img = 0;  

char image_name[13];  

printf("------------- image to video ... ----------------n");  

//初始化视频编写器，参数根据实际视频文件修改  

CvVideoWriter *writer = 0;  

int isColor = 1;  

int fps     = 30; // or 25  

int frameW = 400; // 744 for firewire cameras  

int frameH = 240; // 480 for firewire cameras  

writer=cvCreateVideoWriter("out.avi",CV_FOURCC('X','V','I','D'),fps,cvSize(frameW,frameH),isColor);  

printf("tvideo height : %dntvideo width : %dntfps : %dn", frameH, frameW, fps);  

//创建窗口  

cvNamedWindow( "mainWin", CV_WINDOW_AUTOSIZE );  

while(i<NUM_FRAME)  

{  

  sprintf(image_name, "%s%d%s", "image", ++i, ".jpg");  

  img = cvLoadImage(image_name);  

  if(!img)  

  {  

   printf("Could not load image file...n");  

   exit(0);  

  }  

  cvShowImage("mainWin", img);  

  char key = cvWaitKey(20);  

  cvWriteFrame(writer, img);  

}  

cvReleaseVideoWriter(&writer);  

cvDestroyWindow("mainWin");  

}  

 

int main(int argc, char *argv[])  

{  

char filename[13] = "infile.avi";  

Video_to_image(filename); //视频转图片  

Image_to_video();    //图片转视频  

return 0;  

}  